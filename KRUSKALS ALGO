#include <stdio.h>
#include <stdlib.h>

#define MAX_EDGES 100
#define MAX_VERTICES 100

typedef struct Edge {
    int src, dest, weight;
} Edge;

typedef struct Graph {
    int V, E;
    Edge edges[MAX_EDGES];
} Graph;

int find(int parent[], int i) {
    if (parent[i] == -1)
        return i;
    return find(parent, parent[i]);
}

void unionSets(int parent[], int x, int y) {
    int xRoot = find(parent, x);
    int yRoot = find(parent, y);
    parent[xRoot] = yRoot;
}

int compareEdges(const void* a, const void* b) {
    return ((Edge*)a)->weight - ((Edge*)b)->weight;
}

void kruskalMST(Graph graph) {
    int parent[MAX_VERTICES];
    for (int i = 0; i < graph.V; i++)
        parent[i] = -1;

    qsort(graph.edges, graph.E, sizeof(graph.edges[0]), compareEdges);

    printf("Edge \tWeight\n");
    for (int i = 0; i < graph.E; i++) {
        int srcRoot = find(parent, graph.edges[i].src);
        int destRoot = find(parent, graph.edges[i].dest);

        if (srcRoot != destRoot) {
            printf("%d - %d \t%d\n", graph.edges[i].src, graph.edges[i].dest, graph.edges[i].weight);
            unionSets(parent, srcRoot, destRoot);
        }
    }
}

int main() {
    Graph graph;

    printf("Enter the number of vertices: ");
    scanf("%d", &graph.V);

    printf("Enter the number of edges: ");
    scanf("%d", &graph.E);

    printf("Enter the edges and their weights (src dest weight):\n");
    for (int i = 0; i < graph.E; i++) {
        scanf("%d %d %d", &graph.edges[i].src, &graph.edges[i].dest, &graph.edges[i].weight);
    }

    kruskalMST(graph);

    return 0;
}
