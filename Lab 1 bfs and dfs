//BREADTH FIRST SEARCH//

#include<stdio.h>
#include<conio.h>
#include<stdbool.h>
#include<string.h>
#define MAX_NODES 100

typedef struct Node {
    int data;
    struct Node* next;
} Node;

typedef struct Graph {
    Node* adjacencyList[MAX_NODES];
} Graph;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

Graph* createGraph() {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    for (int i = 0; i < MAX_NODES; ++i) {
        graph->adjacencyList[i] = NULL;
    }
    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjacencyList[src];
    graph->adjacencyList[src] = newNode;

    newNode = createNode(src);
    newNode->next = graph->adjacencyList[dest];
    graph->adjacencyList[dest] = newNode;
}

void bfs(Graph* graph, int startNode) {
    bool visited[MAX_NODES];
    memset(visited, false, sizeof(visited));

    int queue[MAX_NODES];
    int front = 0, rear = 0;

    queue[rear++] = startNode;
    visited[startNode] = true;

    while (front < rear) {
        int currentNode = queue[front++];
        printf("%d ", currentNode);

        Node* temp = graph->adjacencyList[currentNode];
        while (temp != NULL) {
            int adjNode = temp->data;
            if (!visited[adjNode]) {
                queue[rear++] = adjNode;
                visited[adjNode] = true;
            }
            temp = temp->next;
        }
    }
}

int main() {
    Graph* graph = createGraph();
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 5);

    int startNode = 0;
    printf("BFS traversal: ");
    bfs(graph, startNode);

    return 0;
}




//DEPTH FIRST SEARCH//

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

#define MAX_NODES 100

typedef struct Node {
    int data;
    struct Node* next;
} Node;

typedef struct Graph {
    Node* adjacencyList[MAX_NODES];
} Graph;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

Graph* createGraph() {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    for (int i = 0; i < MAX_NODES; ++i) {
        graph->adjacencyList[i] = NULL;
    }
    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjacencyList[src];
    graph->adjacencyList[src] = newNode;

    newNode = createNode(src);
    newNode->next = graph->adjacencyList[dest];
    graph->adjacencyList[dest] = newNode;
}

void dfsRec(Graph* graph, int currentNode, bool visited[]) {
    printf("%d ", currentNode);
    visited[currentNode] = true;

    Node* temp = graph->adjacencyList[currentNode];
    while (temp != NULL) {
        int adjNode = temp->data;
        if (!visited[adjNode]) {
            dfsRec(graph, adjNode, visited);
        }
        temp = temp->next;
    }
}

void dfs(Graph* graph, int startNode) {
    bool visited[MAX_NODES];
    memset(visited, false, sizeof(visited));
    dfsRec(graph, startNode, visited);
}

int main() {
    Graph* graph = createGraph();
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 5);

    int startNode = 0;
    printf("DFS traversal: ");
    dfs(graph, startNode);

    return 0;
}


